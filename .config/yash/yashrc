#!/bin/sh

# enable bash-like extended expansion set --brace-expand enable recursive pathname expansion
set --extended-glob
# prevent redirections from overwriting existing files
set --no-clobber
# don't implicitly expand non-existent variables to empty strings
set --no-unset

# avoid removing/overwriting existing files by accident
cp() if [ -t 0 ]; then command cp -i "$@"; else command cp "$@"; fi
mv() if [ -t 0 ]; then command mv -i "$@"; else command mv "$@"; fi
rm() if [ -t 0 ]; then command rm -i "$@"; else command rm "$@"; fi

# normally yash is more POSIX-compliant than /bin/sh :-)
sh() { yash --posix "$@"; }
yash() { command yash "$@"; }
# By re-defining 'yash' using the 'command' built-in, the 'jobs' built-in
# prints a command name that exposes the arguments like
# 'yash --posix -n foo.sh' rather than a command name that hides the
# arguments like 'yash --posix "${@}"'. This applies to the 'yash' command
# invoked via the 'sh' function.

# ensure job control works as expected
case $- in (*m*)
  trap - TSTP TTIN TTOU
esac

# if the terminal supports color...
if [ "$(tput colors 2>/dev/null || echo 0)" -ge 8 ]; then

  # make command output colorful
  if ls --color=auto -d / >/dev/null 2>&1; then
    ls() { command ls --color=auto "$@"; }
  fi
  if grep --color=auto -q X <<<X 2>/dev/null; then
    grep() { command grep --color=auto "$@"; }
  fi
  if ggrep --color=auto -q X <<<X 2>/dev/null; then
    ggrep() { command ggrep --color=auto "$@"; }
  fi

fi

# avoid removing existing crontab by accident
crontab()
if [ -t 0 ] && (
  for arg do
    case "${arg}" in
      (-*r*) exit;;
    esac
  done
  false
) then
  printf 'crontab: seems you are trying to clear your crontab.\n' >&2
  printf 'are you sure? (yes/no) ' >&2
  case "$(head -n 1)" in
    ([Yy]*) command crontab "$@";;
    (*)     printf 'crontab: cancelled.\n' >&2;;
  esac
else
  command crontab "$@"
fi

# define some basic variables if missing
: ${PAGER:=less} ${EDITOR:=vi} ${FCEDIT:=$EDITOR}
: ${LOGNAME:=$(logname)} ${HOSTNAME:=$(uname -n)}

# disable confusing treatment of arguments in the echo command
: ${ECHO_STYLE:=RAW}

# default mail check interval is too long
MAILCHECK=0

# emulate bash's $SHLVL
if [ "${_old_shlvl+set}" != set ]; then
  _old_shlvl=${SHLVL-}
fi
SHLVL=$((_old_shlvl+1)) 2>/dev/null || SHLVL=1
export SHLVL

# initialize event handlers
COMMAND_NOT_FOUND_HANDLER=()
PROMPT_COMMAND=()
YASH_AFTER_CD=()

_hc='\fb.'     # blue hostname for local
if [ "$(id -u)" -eq 0 ]; then
  _uc='\fr.'     # red username for root
  _2c='\fr.'     # red PS2 for root
else
  _uc=$_hc _hc=  # same username color as hostname for non-root user
  _2c=           # PS2 in normal color for non-root user
fi

_gc='\fr'
_venv_info=""
_vc='\fr.'

# The main prompt ($YASH_PS1) contains the username, hostname, working
# directory, last exit status (only if non-zero), and $SHLVL (only if
# non-one).
YASH_PS1=$_uc'${LOGNAME}'$_hc'@${HOSTNAME%%.*} '$_gc'${_vcs_info}'$_vc'${_venv_info}\fd.'\
'${${${PWD:/~/\~}##*/}:-$PWD} ${{?:/0/}:+\\fr.$?\\fd. }${{SHLVL-0}:/1}$ '
YASH_PS1R=''
YASH_PS1S=''
YASH_PS2=$_2c'> '
#YASH_PS2R=
YASH_PS2S=$YASH_PS1S
YASH_PS4='\fm.+ '
YASH_PS4S='\fmo.'
unset _hc _uc _2c
# No escape sequences allowed in the POSIXly-correct mode.
PS1='${LOGNAME}@${HOSTNAME%%.*} '$PS1

# find escape sequence to change terminal window title
case "$TERM" in
  (xterm|xterm[+-]*|gnome|gnome[+-]*|putty|putty[+-]*|cygwin)
    _tsl='\033];' _fsl='\a' ;;
  (*)
    _tsl=$( (tput tsl 0; echo) 2>/dev/null |
    sed -e 's;\\;\\\\;g' -e 's;;\\033;g' -e 's;;\\a;g' -e 's;%;%%;g')
    _fsl=$( (tput fsl  ; echo) 2>/dev/null |
    sed -e 's;\\;\\\\;g' -e 's;;\\033;g' -e 's;;\\a;g' -e 's;%;%%;g') ;;
esac
# if terminal window title can be changed...
if [ "$_tsl" ] && [ "$_fsl" ]; then

  # set terminal window title on each prompt
  _set_term_title()
  if [ -t 2 ]; then
    printf "$_tsl"'%s@%s:%s'"$_fsl" "${LOGNAME}" "${HOSTNAME%%.*}" \
      "${${PWD:/$HOME/\~}/#$HOME\//\~\/}" >&2
  fi
  PROMPT_COMMAND=("$PROMPT_COMMAND" '_set_term_title')

  # reset window title when changing host or user
  ssh() {
    if [ -t 2 ]; then printf "$_tsl"'ssh %s'"$_fsl" "$*" >&2; fi
    command ssh "$@"
  }
  su() {
    if [ -t 2 ]; then printf "$_tsl"'su %s'"$_fsl" "$*" >&2; fi
    command su "$@"
  }
  doas() {
    if [ -t 2 ]; then printf "$_tsl"'doas %s'"$_fsl" "$*" >&2; fi
    command doas "$@"
  }

fi

# define function that updates $_vcs_info and $_vcs_root
_update_vcs_info() {
  typeset type branch
  {
    read --raw-mode type
    read --raw-mode _vcs_root
    read --raw-mode branch
  } <(
    exec 2>/dev/null
    typeset COMMAND_NOT_FOUND_HANDLER=
    while true; do
      if [ -e .git ] || [ . -ef "${GIT_WORK_TREE-}" ]; then
        printf 'git\n%s\n' "${GIT_WORK_TREE:-$PWD}"
        git branch --no-color | sed -n '/^\*/s/^..//p'
        exit
      fi
      if [ / -ef . ] || [ . -ef .. ]; then
        exit
      fi
      \command cd -P ..
    done
  )
  if [ -z $type ] && [ -z $branch ]; then
    _vcs_info=""
  else
    case "$type#$branch" in
      (*#        ) _vcs_info="($type) ";;
      (*         ) _vcs_info="($type@$branch) ";;
    esac
  fi
}
# update $_vcs_info on each prompt
PROMPT_COMMAND=("$PROMPT_COMMAND" '_update_vcs_info')

# define function that updates $_venv_info
_update_venv_info() {
  if [ "${VIRTUAL_ENV:-}" != "" ]; then
    _venv_info="(`basename \"$VIRTUAL_ENV\"`) "
  fi
}
# update $_venv_info on each prompt
PROMPT_COMMAND=("$PROMPT_COMMAND" '_update_venv_info')

# when a directory name is entered as a command, treat as "cd"
_autocd()
if [ -d "$1" ]; then
  HANDLED=true
  cd -- "$@"
  break -i
fi
COMMAND_NOT_FOUND_HANDLER=("$COMMAND_NOT_FOUND_HANDLER" '_autocd "$@"')

# treat command names starting with % as "fg"
_autofg()
if [ $# -eq 1 ]; then
  case $1 in (%*)
    HANDLED=true
    fg "$1"
    break -i
  esac
fi
COMMAND_NOT_FOUND_HANDLER=("$COMMAND_NOT_FOUND_HANDLER" '_autofg "$@"')

# print file type when executing non-executable files
_file_type()
if [ -e "$1" ] && ! [ -d "$1" ]; then
  file -- "$1"
fi
COMMAND_NOT_FOUND_HANDLER=("$COMMAND_NOT_FOUND_HANDLER" '_file_type "$@"')

# Movement
alias -- -='cd -'
# Files
alias \
	cp="cp -iv" \
	mv="mv -iv" \
	rm="rm -iv" \
	rrm="shred -u" \
	mkdir="mkdir -pv" \
	ls="ls --color=auto" \
	grep="grep --color=auto"
# XBPS
alias \
	xi="doas xbps-install" \
	xr="doas xbps-remove" \
	xq="xbps-query"
# System operations
alias \
	k="doas kill -9" \
	so="doas swapoff -a"
# Programs
alias \
	gp="gpg --gen-random --armor 1 30" \
	m="TERM=st mdp" \
	v="vis" \
	z="zathura" \
	trem="transmission-remote"
# Requests
alias \
	getip="curl ident.me"
# X
alias \
	monitors="xrandr --query | grep connected"
